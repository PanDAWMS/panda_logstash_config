filter {
    if ([@metadata][beat] == "pandalogs")
    {
        if ([fields][type] == "taskbuffer")
        {
            fingerprint {
                concatenate_all_fields => true
                target => "uid"
            }
            mutate {
                rename => {"message" => "garbage"}
            }
            ruby {
                code => '
				event.set("garbage", event.get("garbage").split.join(" "))
				'
            }
            grok {
                patterns_dir => "/usr/share/logstash/patterns/"
                match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}" }
            }
            if "creating DBProxyPool" in [message] or "destroying DBProxyPool" in [message] {
                kv {
                    source => "message"
                    value_split => "="
                    field_split => " "
                    trim_value => "()*"
                    trim_key => "()*"
		        }
                mutate {
                    rename => {
                        "host" => "dbproxypool_host"
                    }
                }
            }
            date {
                timezone => "Etc/UTC"
                match => ["timeEvent","ISO8601", "yyyy-MM-dd HH:mm:ss.SSS"]
                target => "@timestamp"
                #remove_field => ["timeEvent"]
            }
            if ("_grokparsefailure" not in [tags])
            {
                mutate {
                    remove_field => "garbage"
                }
            }
        }
    }
}
