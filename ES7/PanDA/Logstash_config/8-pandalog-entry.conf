filter {
    if ([@metadata][beat] == "pandalogs")
    {
        if ([fields][type] == "entry")
        {
            fingerprint {
                concatenate_all_fields => true
                target => "uid"
            }
            mutate {
                rename => {"message" => "garbage"}
            }
            ruby {
                code => '
				event.set("garbage", event.get("garbage").split.join(" "))
			'
            }

            if [garbage] =~ '^[0-9]{4}-[0-9]{2}-[0-9]{2} (([01][\d]+)|(2[0-3]))\:[0-5][0-9]:[0-5][0-9].[0-9][0-9][0-9]' {
                grok {
                    patterns_dir => "/usr/share/logstash/patterns/"
                    match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}" }
                }
                if ([message] =~ 'PID') {
                    kv {
                        source => "message"
                        value_split => "="
                        field_split => " "
                        remove_char_key => "()"
                    }
                    if [message] =~ "\(mem usage \d+ MB\)" {
                        grok {
                            match => { "message" => "\(mem usage %{NUMBER:memUsage:int} MB\)"  }
                        }
                    }
                }
            }
            else {
                drop {}
            }
            date {
                timezone => "Etc/UTC"
                match => ["timeEvent","ISO8601", "yyyy-MM-dd HH:mm:ss.SSS"]
                target => "@timestamp"
                #remove_field => ["timeEvent"]
            }
            if ("_grokparsefailure" not in [tags])
            {
                mutate {
                    remove_field => "garbage"
                }
            }
            ruby {
                code => "
					event.to_hash.each do |key,value|
					if value.instance_of? String
					if (value.match(/^(\d+[,.]\d+)/))
					value = value.gsub(',','.')
					event.set(key, value.to_f)
					end
					if (value.match(/^(\d)+$/))
					event.set(key, value.to_i)
					end
					end
					end
				"
            }
        }
    }
}
