filter {
    if ([@metadata][beat] == "pandalogs") {
        if ([fields][type] == "pandaapidc") {

            mutate {
                rename => {"message" => "garbage"}
            }

            ruby {
                code => '
                    event.set("garbage", event.get("garbage").split.join(" "))
                '
            }

            grok {
                match => {
                patterns_dir => "/usr/share/logstash/patterns/"
                    "garbage" => [
                        "%{TIMESTAMP_ISO8601:timeEvent} %{DATA:logName}: %{LOGLEVEL:logLevel} %{WORD:function_name} %{GREEDYDATA:message}"
                    ]
                }
            }
            kv {
                    source => "message"
                    trim_value => "<>"
                    trim_key => "<>"
                    value_split => "="
                    field_split => " "
                    allow_empty_values => true
            }
            ruby {
                code => '
                    if event.get("dataset").to_s.strip.empty?
                        event.set("dataset", "None")
                    end
                '
            }
            date {
                match => ["timeEvent", "ISO8601", "yyyy-MM-dd HH:mm:ss,SSS"]
                timezone => "Etc/UTC"
                target => "@timestamp"
            }

            if ("_grokparsefailure" not in [tags]) {
                mutate {
                remove_field => ["garbage"]
                }
            }
        }
    }
}