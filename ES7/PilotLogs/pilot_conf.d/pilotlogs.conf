input {
    http {
        port => 8443 
        user => USER
        password => PASSWORD
        type => "phttps"
        threads => 10
        ssl => true
        ssl_certificate => ""
        ssl_key => ""
        ssl_verify_mode => none
        cipher_suites => ["TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"]
        tls_min_version => 1.2
    }
}
filter {
    mutate {
        rename => {"message" => "input_message"}
    }
    grok {
        patterns_dir => "/usr/share/logstash/patterns/"
        match => { "input_message" => "{%{GREEDYDATA:message_kv}, 'message': %{GREEDYDATA:message}}" }
    } 
    kv {
        source => "message_kv"
        trim_key => "'"
        trim_value => "',"
        value_split => ":"
    }
    mutate {
        convert => {"PilotTimeStamp" => "string"}
    }
    ruby {
        code => "
            timestamp_source = (event.get('[PilotTimeStamp]')).split(/\s|\./)
            event.set('[@timestamp_nanoseconds]', ((Time.at(timestamp_source[0].to_i).getutc).strftime('%Y-%m-%dT%H:%M:%S.') +  timestamp_source[1] + 'Z') )
            event.set('[nanoseconds_debug]', ((Time.at(timestamp_source[0].to_i).getutc).strftime('%Y-%m-%dT%H:%M:%S.') +  timestamp_source[1] + 'Z') )
        event.set('[@timestamp]', LogStash::Timestamp.new(event.get('[@timestamp_nanoseconds]')) )
        "
    }
}
output {
    elasticsearch {
        hosts => "https://es-atlas1.cern.ch:443/es"
        cacert => ""
        index => "atlas_pilotlogs-%{+YYYY.MM}"
        user => ""
        password => ""
        ssl => true
        ssl_certificate_verification => true
        manage_template => false
        ilm_enabled => false
    }
}
