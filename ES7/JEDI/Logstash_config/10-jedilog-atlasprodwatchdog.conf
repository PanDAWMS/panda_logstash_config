filter {
    if ([@metadata][beat] == "jedilogs")
    {
        if ([fields][type] == "atlasprodwatchdog")
        {
            mutate {
                rename => {"message" => "garbage"}
            }
            ruby {
                code => '
					event.set("garbage", event.get("garbage").split.join(" "))
				'
            }
            grok {
                patterns_dir => "/usr/share/logstash/patterns/"
                match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} <%{TIMESTAMP_AtlasProdJobThrottler}> %{GREEDYDATA:message}"}
            }
            if ([logLevel] == "INFO")
            {
                kv {
                    source => "message"
                    value_split => "="
                }
            }
            if ([logLevel] == "DEBUG" and [message] =~ "workQueue")
            {
                kv {
                    source => "message"
                    value_split => "="
                }
            }
            #reserve
            if ([logLevel] == "ERROR")
            {

            }
            date {
                timezone => "Etc/UTC"
                match => ["timeEvent","ISO8601", "yyyy-MM-dd HH:mm:ss.SSS"]
                target => "@timestamp"
                #remove_field => ["timeEvent"]
            }
            # removing #ATM tag from message field + whitespace. Adding ATM tag to an array of tags
            if ([message] =~ /#ATM/) {
                mutate {
                    gsub => ["message","#ATM ",""]
                    add_tag => ["ATM"]
                }
            }
            if ("_grokparsefailure" not in [tags])
            {
                mutate {
                    remove_field => "garbage"
                }
            }
            ruby {
                code => "
					event.to_hash.each do |key,value|
					if value.instance_of? String
					if (value.match(/^(\d+[,.]\d+)/))
					value = value.gsub(',','.')
					event.set(key, value.to_f)
					end
					if (value.match(/^(\d)+$/))
					event.set(key, value.to_i)
					end
					end
					end
				"
            }
        }
    }
}
