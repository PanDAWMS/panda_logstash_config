filter {
    if ([@metadata][beat] == "jedilogs")
    {
        if ([fields][type] == "jedidbproxyfiltered")
        {
            fingerprint {
                concatenate_all_fields => true
                target => "uid"
            }
            mutate {
                rename => {"message" => "garbage"}
            }
            ruby {
                code => '
        event.set("garbage", event.get("garbage").split.join(" "))
        '
            }
            grok {
                patterns_dir => "/usr/share/logstash/patterns/"
                match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}" }
            }
            # removing #ATM tag from message field + whitespace. Adding ATM tag to an array of tags
            if ([message] =~ /#ATM/) {
                mutate {
                    gsub => ["message","#ATM ",""]
                    add_tag => ["ATM"]
                }
            }
            # applying KV plugin for the input events which contain #KV tag. Adding KV tag to an array of tags
            if ([message] =~ /#KV/) {
                kv {
                    source => "message"
                    trim_value => "<>"
                    trim_key => "<>"
                    value_split => "="
                }
                mutate {
                    gsub => ["message","#KV ",""]
                    add_tag => ["KV"]
                }
            }
            if ([message] =~ /getScoutJobData_JEDI/) {
                grok {
                    patterns_dir => "/usr/share/logstash/patterns/"
                    match => { "message" => "%{WORD:operation} <jediTaskID=%{WORD:jeditaskid}> scouts got for %{GREEDYDATA:kvmessage}" }
                }
                mutate {
                    remove_field => "jeditaskid"
                }
                if ([kvmessage] =~ /leak/) {
                    mutate { add_tag => "leak_in_message" }
                }
               kv {
                    source => "kvmessage"
                    trim_value => "<>"
                    trim_key => "<>"
                    value_split => "="
                }
                mutate { remove_field => [ "kvmessage" ] }
            }
            date {
                timezone => "Etc/UTC"
                match => ["timeEvent","ISO8601", "yyyy-MM-dd HH:mm:ss.SSS"]
                target => "@timestamp"
                #remove_field => ["timeEvent"]
            }
            if ("_grokparsefailure" not in [tags])
            {
                mutate {
                    remove_field => "garbage"
                }
            }
        }
    }
}
