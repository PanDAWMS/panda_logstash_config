filter {
	if ([@metadata][beat]=="jedilogs")
	{
		if ([fields][type]=="jobgenerator")
		{
			mutate {
				rename => {"message"=>"garbage"}
			}
			ruby {
				code => '
				event.set("garbage", event.get("garbage").split.join(" "))
				'
			}
			grok {
				patterns_dir => "/usr/share/logstash/patterns/"
				match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}"}
			}
			if ([logLevel]=="INFO" or [logLevel]=="ERROR")
			{
				grok {
					patterns_dir => "/usr/share/logstash/patterns/"
					match => { "message" => "%{BRACKETS:jtdt} %{GREEDYDATA:message}"}
					overwrite => [ "message" ]
				}
				kv {
					source => "jtdt"
					trim_value => "<>"
					trim_key => "<>"
					value_split => "="
					field_split => " "
					remove_field => "jtdt"
				}
				if ([message]=~"successfully submitted")
				{
					#ruby {
					#	code => "
					#	fieldArray = event.get('message')
					#	splitString = fieldArray.scan(/(?<=submitted )(.*)(?= for)/).join(' ')
					#	if splitString != ''
					#		split_num = splitString.split('/').map(&:to_i)
					#		event.set('jobs_submitted', split_num[0])
					#		event.set('jobs_tried', split_num[1])
					#		if (split_num[0]==split_num[1])
					#		event.set('note', 'jobs_submitted equals jobs_tried')
					#		elsif (split_num[0] < split_num[1])
					#		event.set('note', 'jobs_submitted less than jobs_tried')
					#		end
					#	end
					#"
					#}
					kv {
						source => "message"
						value_split => "="
						field_split => " "
					}
				}
			}
			if ([logLevel]=="DEBUG")
			{
				grok {
					patterns_dir => "/usr/share/logstash/patterns/"
					match => { "message" => ["<%{TIMESTAMP_AtlasProdJobThrottler}> %{GREEDYDATA:message}","%{GREEDYDATA:message}"]}
					overwrite => [ "message" ]
				}
			}
			date {
				timezone => "Etc/UTC"
				match => ["timeEvent","ISO8601", "yyyy-MM-dd HH:mm:ss.SSS]
				target => "@timestamp"
				#remove_field => ["timeEvent"]
			}
			if ("_grokparsefailure" not in [tags])
			{
				mutate {
					remove_field => "garbage"
				}
			}
			ruby {
				code => "
				event.to_hash.each do |key,value|
				if value.instance_of? String
				if (value.match(/^(\d+[,.]\d+)/))
				value = value.gsub(',','.')
				event.set(key, value.to_f)
				end
				if (value.match(/^(\d)+$/))
				event.set(key, value.to_i)
				end
				end
				end
				"
			}
		}
	}
}
