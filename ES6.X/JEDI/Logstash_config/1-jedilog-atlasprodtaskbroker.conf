filter {
	if ([@metadata][beat]=="jedilogs")
	{
		if ([fields][type]=="atlasprodtaskbroker")
		{
			mutate {
				rename => {"message"=>"garbage"}
			}
			ruby {
				code => '
				event.set("garbage", event.get("garbage").split.join(" "))
				'
			}
			grok {
				patterns_dir => "/usr/share/logstash/patterns/"
				match => { "garbage" => ["%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} <jediTaskID=%{NUMBER:jediTaskID}> %{GREEDYDATA:message}","%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel } <%{TIMESTAMP_AtlasProdJobThrottler}> %{GREEDYDATA:message}","%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}"]
			}
		}
		kv {
			source => "message"
			value_split => "="
			field_split => " "
			trim_value => "()*"
			trim_key => "()*"
		}
		date {
			timezone => "Etc/UTC"
			match => ["timeEvent","ISO8601", "yyyy-MM-dd HH:mm:ss.SSS"]
			target => "@timestamp"
			#remove_field => ["timeEvent"]
		}
		if ("_grokparsefailure" not in [tags])
		{
			mutate {
				remove_field => "garbage"
			}
		}
		if ([RW] =~ '0<50')
		{
			mutate {
				rename => {"RW"=>"RWString"}
			}
		}
		if ([cpuTimenEventsPerJob] !~ '^(\d+[,.]\d+)' and [cpuTimenEventsPerJob] !~ '^(\d)+$')
		{
			mutate {
				rename => {"cpuTimenEventsPerJob"=>"cpuTimenEventsPerJobString"}
			}
		}
		ruby {
			code => "
			event.to_hash.each do |key,value|
			if value.instance_of? String
			if (value.match(/^(\d+[,.]\d+)/))
			value = value.gsub(',','.')
			event.set(key, value.to_f)
			end
			if (value.match(/^(\d)+$/))
			event.set(key, value.to_i)
			end
			end
			end
			"
		}
	}
}
}
