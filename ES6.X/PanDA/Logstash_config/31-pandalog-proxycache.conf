filter {
	if ([@metadata][beat]=="pandalogs")
	{
		if ([fields][type]=="proxycache")
		{
			mutate {
				rename => {"message"=>"garbage"}
			}
			ruby {
				code => '
				event.set("garbage", event.get("garbage").split.join(" "))
				'
			}
			grok {
				patterns_dir => "/usr/share/logstash/patterns/"
				match => { "garbage" => "start at %{TIMESTAMP_ISO8601:startat} %{GREEDYDATA:message}" }
			}
			date {
				timezone => "Etc/UTC"
				match => ["timeEvent","ISO8601", "yyyy-MM-dd HH:mm:ss.SSS"]
				target => "@timestamp"
				#remove_field => ["timeEvent"]
			}
			if ("_grokparsefailure" not in [tags])
			{
				mutate {
					remove_field => "garbage"
				}
			}
			if ![logName]
			{
				mutate {
					add_field=> {"logName"=>"panda.log.Proxycache"}
				}
			}
			if ![logLevel]
			{
				mutate {
					add_field=> {"loglevel"=>"INFO"}
				}
			}
		}
	}
}
