filter {
	if ([@metadata][beat]=="pandalogs")
	{
		if ([fields][type]=="brokerlog")
		{
			mutate {
				rename => {"message"=>"garbage"}
			}
			ruby {
				code => '
				event.set("garbage", event.get("garbage").split.join(" "))
				'
			}
			if ("hospital queues" in [garbage])
			{
				grok {
					patterns_dir => "/usr/share/logstash/patterns/"
					match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}" }
				}
				mutate {
					remove_field => ['garbage','tags']
				}
				mutate {
					add_tag => ['hospital_queues']
				}
			}
			else
			{
				grok {
					patterns_dir => "/usr/share/logstash/patterns/"
					match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{NOTSPACE:timeid} %{GREEDYDATA:message}" }
				}
				mutate {
					remove_field => ['garbage','tags']
				}
				mutate {
					add_tag => ['not_hospital_queues']
				}
			}
			date {
				timezone => "Etc/UTC"
				match => ["timeEvent","ISO8601", "yyyy-MM-dd HH:mm:ss.SSS]
				target => "@timestamp"
				#remove_field => ["timeEvent"]
			}
		}
	}
}
