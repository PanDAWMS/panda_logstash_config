filter {
	if ([@metadata][beat]=="pandalogs")
	{
	if ([fields][type]=="pilotrequest")
	{
		mutate {
			rename => {"message"=>"garbage"}
		}
		ruby {
			code => '
				event.set("garbage", event.get("garbage").split.join(" "))
			'
		}
		grok {
			patterns_dir => "/usr/share/logstash/patterns/"
			match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}" }
		}
		kv {
			source => "message"
			value_split => "="
			field_split => ","
		}
        	if [type]
        	{
            	mutate {
                    	rename => {"type"=>"typef"}
                    	add_field=> {"type"=>"pilotrequest"}
            	}
      	  }

		if ("_grokparsefailure" not in [tags])
		{
			mutate {
				remove_field => ["garbage", "message"]
			}
		}
			ruby {
				code => "
					event.to_hash.each do |key,value|
					if value.instance_of? String
					if (value.match(/^(\d+[,.]\d+)/))
					value = value.gsub(',','.')
					event.set(key, value.to_f)
					end
					if (value.match(/^(\d)+$/))
					event.set(key, value.to_i)
					end
					end
					end
				"
			}
	}
}
}
