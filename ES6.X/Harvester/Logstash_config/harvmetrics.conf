input {
jdbc {
       jdbc_driver_library => "/opt/ojdbc8.jar"
       jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
       jdbc_connection_string => ""
       jdbc_user => ""
       jdbc_password =>""
       jdbc_default_timezone=>"UTC"
       jdbc_fetch_size => 1000
       last_run_metadata_path => "/etc/logstash/lastrun/.logstash_jdbc_test_last_run"
       statement => "
           SELECT metrics.*, (select count(workerid) from ATLAS_PANDA.HARVESTER_WORKERS
    WHERE SUBMITTIME > CAST (sys_extract_utc(SYSTIMESTAMP) - interval '30' minute as DATE) and harvesterid = metrics.harvester_id and harvesterhost = metrics.harvester_host and status in ('submitted')) as nsubmittedworkers,
    (select count(workerid) from ATLAS_PANDA.HARVESTER_WORKERS
    WHERE LASTUPDATE > CAST (sys_extract_utc(SYSTIMESTAMP) - interval '30' minute as DATE) and harvesterid = metrics.harvester_id and harvesterhost = metrics.harvester_host) as nlastupdatedworkers,
    (select count(workerid) from ATLAS_PANDA.HARVESTER_WORKERS
    WHERE LASTUPDATE > CAST (sys_extract_utc(SYSTIMESTAMP) - interval '30' minute as DATE) and harvesterid = metrics.harvester_id and harvesterhost = metrics.harvester_host and status in ('running')) as nactiveworkers,
    (select count(workerid) from ATLAS_PANDA.HARVESTER_WORKERS
    WHERE LASTUPDATE > CAST (sys_extract_utc(SYSTIMESTAMP) - interval '30' minute as DATE) and harvesterid = metrics.harvester_id and harvesterhost = metrics.harvester_host and status in ('finished','cancelled','failed')) as ncompletedworkers
    FROM ATLAS_PANDA.HARVESTER_METRICS metrics WHERE metrics.CREATION_TIME > CAST (sys_extract_utc(SYSTIMESTAMP) - interval '5' minute as DATE)
"
       schedule => "*/2 * * * *"
       id => "k"
       type => "harvmetricsupdate"
}

}
filter {

if [type] == "harvmetricsfulldump" or [type] == "harvmetricsupdate"
{

mutate {
convert => {"creation_time" => "string"}
}

date {
match => ["creation_time", "ISO8601"]
timezone =>"UTC"
}

date {
match =>["creation_time","ISO8601"]
timezone =>"UTC"
target =>"creation_time"
}

json {
    source => "metrics"
}


ruby {
     code => "
     event.to_hash.each do |key,value|
     if value.instance_of? String
        if (value.match(/^(\d+[,.]\d+)/))
            value = value.gsub(',','.')
            event.set(key, value.to_f)
            end
        if (value.match(/^(\d)+$/))
           event.set(key, value.to_i)
           end
        end
      end
                                "
      }
}
}
output {
if [type] == "harvmetricsfulldump" or [type] == "harvmetricsupdate"
{
elasticsearch {
   hosts => [""]
   index => "atlas_harvestermetrics-%{+YYYY.MM.dd}"
   doc_as_upsert => true
   user => ""
   password => ""
   ssl => true
   ssl_certificate_verification => true
   manage_template => false
}
}
}
