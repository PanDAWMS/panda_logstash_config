input {
    jdbc {
        jdbc_driver_library => "/mnt/ojdbc8.jar"
        jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
        jdbc_connection_string => ""
        jdbc_user => ""
        jdbc_password => ""
        jdbc_default_timezone => "UTC"
        jdbc_fetch_size => 1000
        last_run_metadata_path => "/etc/logstash/lastrun/.logstash_jdbc_test_last_run"
        statement => "SELECT * FROM (SELECT  hw.*, sc.gocname as site, sc.cloud, sc.status as agis_pq_status FROM  atlas_panda.harvester_workers hw, atlas_pandameta.schedconfig sc where hw.computingsite = sc.siteid) WHERE lastupdate > CAST (sys_extract_utc(SYSTIMESTAMP) - interval '6' hour  as DATE) OR submittime >  CAST (sys_extract_utc(SYSTIMESTAMP) - interval '6' hour  as DATE)"
        id => "a"
        type => "fulldump"
    }
    jdbc {
        jdbc_driver_library => "/mnt/ojdbc8.jar"
        jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
        jdbc_connection_string => ""
        jdbc_user => ""
        jdbc_password => ""
        jdbc_default_timezone => "UTC"
        jdbc_fetch_size => 1000
        last_run_metadata_path => "/etc/logstash/lastrun/.logstash_jdbc_test_last_run"
        statement => "SELECT * FROM (SELECT  hw.*, sc.gocname as site, sc.cloud, sc.status as agis_pq_status FROM  atlas_panda.harvester_workers hw, atlas_pandameta.schedconfig sc where hw.computingsite = sc.siteid) WHERE lastupdate > CAST (sys_extract_utc(SYSTIMESTAMP) - interval '5' minute as DATE) OR submittime >  CAST (sys_extract_utc(SYSTIMESTAMP) - interval '5' minute as DATE)"
        schedule => "*/2 * * * *"
        id => "b"
        type => "update"
    }
}
filter {
    if [type] == "fulldump" or [type] == "update" {

        mutate {
            convert => {"submittime" => "string"}
        }
        date {
            match => ["submittime", "ISO8601"]
            timezone => "UTC"
        }
        date {
            match => ["submittime","ISO8601"]
            timezone => "UTC"
            target => "submittime"
        }

        if ([agis_pq_status] in ["brokeroff", "test", "online"]) {
            mutate {
                add_field => { "pq_status" => "ACTIVE" }
            }
        }
                else {
            mutate {
                add_field => { "pq_status" => "INACTIVE" }
            }
        }

        ruby {
            code => "
    event.to_hash.each do |key,value|
    if key == 'batchid'
    if value != '' or value != nil
    event.set(key,value.to_s)
    else
    event.set(key,'none')
    end
    end
    if value == '' or value == nil
    if key != 'nativeexitcode' and key !='njobs' and key !='errorcode' and key!='ncore' and key != 'lastupdate' and key!= 'submittime'  and key != 'endtime' and key!= 'starttime'
    event.set(key, 'none')
    else
    if key != 'lastupdate' and key!='submittime' and key !='endtime' and key!= 'starttime' and key!='batchid'
    event.set(key, 0)
    end
    end
    end
    end
"
        }

        if(![submittime]) {

            mutate {
                convert => {"lastupdate" => "string"}
            }
            date {
                match => ["lastupdate", "ISO8601"]
                timezone => "UTC"
            }
            date {
                match => ["lastupdate", "ISO8601"]
                timezone => "UTC"
                target => "lastupdate"
            }
        }
        mutate {
            convert => {"batchid" => "string"}
        }
    }
}

output {
    if [type] == "fulldump" or [type] == "update" {
        elasticsearch {
            hosts => [""]
            index => "atlas_harvesterworkers-%{+YYYY.MM}"
            document_id => "%{harvesterid}|%{workerid}"
            doc_as_upsert => true
            user => ""
            password => ""
            ssl => true
            ssl_certificate_verification => true
            manage_template => false
        }
    }
}