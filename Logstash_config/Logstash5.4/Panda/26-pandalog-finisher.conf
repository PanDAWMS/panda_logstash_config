filter {
	if ([@metadata][beat]=="pandalogs")
	{
	if ([type]=="finisher")
	{
		mutate {
			rename => {"message"=>"garbage"}
		}
		ruby {
			code => '
				event.set("garbage", event.get("garbage").split.join(" "))
			'
		}
		grok {
			patterns_dir => "/usr/share/logstash/patterns/"
			match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}" }
		}

		kv {
			source => "message"
			trim_value => "'{}"
			trim_key => "'{}"
			value_split => ":"
		}
		if ("_grokparsefailure" not in [tags])
		{
			mutate {
				remove_field => "garbage"
			}
		}
        	ruby {
        		code => "
               		event.to_hash.each do |key,value|
               		if value.instance_of? String
               		if (value.match(/^(\d+[,.]\d+)/) and key!='IDs')
               		value = value.gsub(',','.')
               		event.set(key, value.to_f)
               		end
               		if (value.match(/^(\d)+$/) and key!='IDs')
               		event.set(key, value.to_i)
               		end
               		end
               		end
              		"
               	}
        	mutate {
                	rename =>{"IDs"=>"IDstring"}
        	}
	}
	}
}
