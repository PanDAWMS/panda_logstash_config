filter {
	if ([@metadata][beat]=="jedilogs")
	{
		if ([type]=="contentsfeeder")
		{
			mutate {
				rename => {"message"=>"garbage"}
			}
			ruby {
				code => '
					event.set("garbage", event.get("garbage").split.join(" "))
				'
			}
			grok {
				patterns_dir => "/usr/share/logstash/patterns/"
				match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}" }
			}
			if ([logLevel]=="INFO" or [logLevel]=="ERROR")
			{
				grok {
					patterns_dir => "/usr/share/logstash/patterns/"
					match => { "message" => ["<jediTaskID=%{NUMBER:jediTaskID} gshare=%{WORD:gshare}> %{GREEDYDATA:message}","%{GREEDYDATA:message}"]}
					overwrite => ["message"]
				}
				kv {
					source => "message"
					value_split => "="
				}
			}
			if ("_grokparsefailure" not in [tags])
			{
				mutate {
					remove_field => "garbage"
				}
			}
			ruby {
				code => "
					event.to_hash.each do |key,value|
					if value.instance_of? String
					if (value.match(/^(\d+[,.]\d+)/))
					value = value.gsub(',','.')
					event.set(key, value.to_f)
					end
					if (value.match(/^(\d)+$/))
					event.set(key, value.to_i)
					end
					end
					end
				"
			}
		}
	}
}