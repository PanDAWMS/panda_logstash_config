filter {
	if ([@metadata][beat]=="bigpandalogs")
	{
		if ([type]=="djangolog")
		{
		mutate {
			rename => {"message"=>"garbage"}
		}
		ruby {
			code => '
				event.set("garbage", event.get("garbage").split.join(" "))
			'
		}
		grok {
			patterns_dir => "/opt/logstash/patterns/"
			match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE2:typeEvent} %{TYPE2:infEvent} %{WORD:logLevel} %{GREEDYDATA:message}" }
		}
		mutate {
			add_field => {"timeEventStamp" => "%{@timestamp}"}
		}
		#date {
		#	match => ["timeEvent","ISO8601"]
		#	target => "timeEventStamp"
		#	timezone => "Etc/GMT"
		#}
		ruby {
			init => "require 'date'"
		#	code => ""
			code => "
			begin
			te = event.get('timeEvent')
			dte = DateTime.parse(te)
			dte += (2/1440.0)
			#end_date = dte.strftime('%Y-%m-%dT%H:%M:00.000Z')
			event.set('endDateStr',dte.strftime('%Y-%m-%dT%H:%M:00.000Z').to_s)
			dte -= (4/1440.0)
			event.set('startDateStr',dte.strftime('%Y-%m-%dT%H:%M:00.000Z').to_s)
			end
			"
		}		
		if ("_grokparsefailure" not in [tags])
		{
		mutate {
			remove_field => "garbage"
		}
		}
		}
	}
}
