filter {
	if ([@metadata][beat]=="pandalogs")
	{
	if ([type]=="serveraccess")
	{
		mutate {

			rename => {"message"=>"garbage"}
			gsub => ["garbage","[\\]",""
			,"garbage","[_]","-"]
		}

		grok {
			patterns_dir => "/opt/logstash/patterns/"
			match => { "garbage" => "%{COMMONLOG}" }
		}
		if ([Function_called] !~ "\*") 
		{
			ruby {
				code => "
					fieldArray = event['Function_called']
					split_func = fieldArray.split('/')
					if (fieldArray =~ %r'schedconfig' or fieldArray =~ %r'pilot' or fieldArray =~%r'user')
					event['Short_function_called_str'] = split_func[-2]
					elsif (fieldArray =~ %r'\?')
					event['Short_function_called_str'] = split_func[-1].split('?').first
					else
					event['Short_function_called_str'] = split_func[-1]
					end
				"
			}
		}
		if ("_grokparsefailure" not in [tags])
		{
			mutate {
				convert =>  { "Size" => "integer" }
				remove_field => "garbage"
			}
		}
        if ([hostname] =~'\b(?:[0-9A-Za-z][0-9A-Za-z_-]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\.?|\b)')
            {
                mutate {
                        rename => {"hostname"=>"hostnameStringFix"}
                }
        }
        ruby {
            code => "
                event.to_hash.each do |key,value|
                if (value.instance_of? String and key != 'hostnameStringFix')
                if (value.match(/^(\d+[,.]\d+)/))
                value = value.gsub(',','.')
                event[key] = value.to_f
                end
                if (value.match(/^(\d)+$/))
                event[key] = value.to_i
                end
                end
                end
            "
        }
        mutate {
            convert => {"hostnameStringFix" => "string"}
        }
        if ![logName]
        {
        mutate {
                add_field=> {"logName"=>"panda.log.Serveraccess"}
        }
        }
        if ![logLevel]
        {
        mutate {
                add_field=> {"logLevel"=>"INFO"}
        }
        }

	}
	}
}