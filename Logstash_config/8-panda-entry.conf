filter {
	if ([type]=="entry")
	{
		mutate {
			rename => {"message"=>"garbage"}
		}
		ruby {
			code => "event['garbage']  = event['garbage'].split.join(' ')"
		}	
		grok {
			patterns_dir => "/opt/logstash/patterns/"
			match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}" }	
		}
		if ([logLevel]=="ERROR")
		{
			kv {
				source => "message"
				value_split => ":"
				field_split => ","
				trim => ":"
			}		
		}
		else {
			grok {
				patterns_dir => "/opt/logstash/patterns/"
				match => { "message" => "PID=%{NUMBER:pid} %{TYPE:typeEvent} %{GREEDYDATA:message}"}	
			}
			kv {
				source => "message"
				value_split => ":"
				field_split => ","
			}
		}
		if ("_grokparsefailure" not in [tags])
		{		
			mutate {
				remove_field => "garbage"
			}
		}
	}
}