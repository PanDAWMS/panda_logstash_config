filter {
	if ([@metadata][beat]=="jedilogs")
	{
		if ([type]=="jobgenerator")
		{
			mutate {
				rename => {"message"=>"garbage"}
			}
			ruby {
			code => "
			event['garbage']  = event['garbage'].split.join(' ')"
			}
			grok {
				patterns_dir => "/opt/logstash/patterns/"
				match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:nameLog}: %{WORD:logLevel} %{GREEDYDATA:message}"}
			}
			if ([logLevel]=="INFO" or [logLevel]=="ERROR")
			{
				grok {
					patterns_dir => "/opt/logstash/patterns/"
					match => { "message" => "%{BRACKETS:jtdt} %{GREEDYDATA:message}"}
					overwrite => [ "message" ]
				}
				kv {
					source => "jtdt"
					trim => "<>"
					trimkey => "<>"
					value_split => "="
					field_split => " "
					remove_field => "jtdt"
				}
				if ([message]=~"successfully submitted")
				{
					ruby {
						code => "
						fieldArray = event['message']
						splitString = fieldArray.scan(/(?<=submitted )(.*)(?= for)/).join(' ')
						split_num = splitString.split('/').map(&:to_i)
						event['jobs_submitted'] = split_num[0]
						event['jobs_tried'] = split_num[1]
						if (split_num[0]==split_num[1])
						event['note'] = 'jobs_submitted equals jobs_tried'
						elsif (split_num[0] < split_num[1])
						event['note'] = 'jobs_submitted less than jobs_tried'
						end
					"
					}
				}
			}
			if ([logLevel]=="DEBUG")
			{
				grok {
					patterns_dir => "/opt/logstash/patterns/"
					match => { "message" => ["<%{TIMESTAMP_AtlasProdJobThrottler}> %{GREEDYDATA:message}","%{GREEDYDATA:message}"]}
					overwrite => [ "message" ]
				}
			}
			if ("_grokparsefailure" not in [tags])
			{
				mutate {
					remove_field => "garbage"
				}
			}
  		}
	}
}