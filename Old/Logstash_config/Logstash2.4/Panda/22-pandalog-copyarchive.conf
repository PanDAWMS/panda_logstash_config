filter {
	if ([@metadata][beat]=="pandalogs")
	{
	if ([type]=="copyarchive")
	{
		mutate {
			rename => {"message"=>"garbage"}
		}
		ruby {
			code => "event['garbage']  = event['garbage'].split.join(' ')"
		}
		grok {
			patterns_dir => "/opt/logstash/patterns/"
			match => { "garbage" => "%{TIMESTAMP_ISO8601:timeEvent} %{TYPE:logName}: %{WORD:logLevel} %{GREEDYDATA:message}" }
		}
		if ("_grokparsefailure" not in [tags])
		{
			mutate {
				remove_field => "garbage"
			}
		}
		if ([message] =~ "^check")
		{
			kv {
				source => "message"
				value_split => "="
			}
			mutate {
				remove_field => ["message"]
			}
		}
			ruby {
				code => "
					event.to_hash.each do |key,value|
					if value.instance_of? String
					if (value.match(/^(\d+[,.]\d+)/))
					value = value.gsub(',','.')
					event[key] = value.to_f
					end
					if (value.match(/^(\d)+$/))
					event[key] = value.to_i
					end
					end
					end
				"
			}
	#	if ([message] =~ "^check")
	#	{
	#		mutate{
	#			 strip => ["message"]
	#		}
	#		kv {
	#			source => "message"
	#			value_split => ":"
	#		}
	#	}
	}
}
}
